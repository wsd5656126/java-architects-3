package com.wusd.orm.util;

import com.sun.org.apache.bcel.internal.generic.DMUL;
import com.sun.org.apache.bcel.internal.generic.Select;

import java.sql.*;
import java.util.List;

public class JDBCUtils {
    private static String connect;
    private static String driverClassName;
    private static String URL;
    private static String username;
    private static String password;
    private static boolean autoCommit;

    private static Connection conn;

    static {
        config();
    }

    private static void config() {
        driverClassName = "com.mysql.jdbc.Driver";
        URL = "jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncode=utf-8";
        username = "root";
        password = "wusd123..";
        autoCommit = false;
    }

    private static boolean load() {
        try {
            Class.forName(driverClassName);
            return true;
        } catch (ClassNotFoundException e) {
            System.err.println("驱动类 " + driverClassName + " 加载失败");
        }
        return false;
    }

    private static boolean invalid() {
        if (conn != null) {
            try {
                if (conn.isClosed() || !conn.isValid(3)) {
                    return true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return false;
        }
        return true;
    }

    public static Connection connect() {
        if (invalid()) {
            load();
            try {
                conn = DriverManager.getConnection(URL, username, password);
            } catch (Exception e) {
                System.err.println("建立 " + connect + " 数据库连接失败, " + e.getMessage());
            }
        }
        return conn;
    }

    public static void transaction() {
        try {
            conn.setAutoCommit(autoCommit);
        } catch (Exception e) {
            System.out.println("设置事务的提交方式为: " + (autoCommit ? "自动提交" : "手动提交") + " 时失败"
                    + e.getMessage());
        }
    }

    public static Statement statement() {
        Statement st = null;
        connect();
        transaction();
        try {
            st = conn.createStatement();
        } catch (Exception e) {
            System.err.println("创建statement对象失败: " + e.getMessage());
        }
        return st;
    }

    private static PreparedStatement prepare(String SQL, boolean autoGeneratedKeys) {
        PreparedStatement ps = null;
        connect();
        transaction();
        try {
            if (autoGeneratedKeys) {
                ps = conn.prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS);
            } else {
                ps = conn.prepareStatement(SQL);
            }
        } catch (Exception e) {
            System.out.println("创建 PreparedStatement 对象失败: " + e.getMessage());
        }
        return ps;
    }

    public static ResultSet query(String SQL, List<Object> params) {
        if (SQL == null || SQL.trim().isEmpty() || !SQL.trim().toLowerCase().startsWith("select")) {
            throw new RuntimeException("你的SQL语句为空或不适查询语句");
        }
        ResultSet rs = null;
        if (params.size() > 0) {
            PreparedStatement ps = prepare(SQL, false);
            try {
                for (int i = 0; i < params.size(); i++) {
                    ps.setObject(i + 1, params.get(i));
                }
                rs = ps.executeQuery();
            } catch (Exception e) {
                System.out.println("执行SQL失败:" + e.getMessage());
            }
        } else {
            Statement st = statement();
            try {
                rs = st.executeQuery(SQL);
            } catch (Exception e) {
                System.out.println("执行SQL失败:" + e.getMessage());
            }
        }

        return rs;
    }

    private static Object typeof(Object o) {
        Object r = o;
        if (o instanceof java.sql.Timestamp) {
            return r;
        }
        if (o instanceof java.util.Date) {
            java.util.Date d = (java.util.Date) o;
            r = new java.sql.Date(d.getTime());
            return r;
        }
        if (o instanceof Character || o.getClass() == char.class) {
            r = String.valueOf(o);
            return r;
        }
        return r;
    }

    public static boolean execute(String SQL, Object... params) {
        if (SQL == null || SQL.trim().isEmpty() || SQL.trim().startsWith("select")) {
            throw new RuntimeException("你的SQL语句为空或有错");
        }
        boolean r = false;
        SQL = SQL.trim();
        SQL = SQL.toLowerCase();
        String prefix = SQL.substring(0, SQL.indexOf(" "));
        String operation = "";
        switch (prefix) {
            case "create":
                operation = "create table";
                break;
            case "alter":
                operation = "update table";
                break;
            case "drop":
                operation = "drop table";
                break;
            case "truncate":
                operation = "truncate table";
                break;
            case "insert":
                operation = "insert :";
                break;
            case "update":
                operation = "update :";
                break;
            case "delete":
                operation = "delete :";
                break;
        }
        if (params.length > 0) {
            PreparedStatement ps = prepare(SQL, false);
            Connection c = null;
            try {
                c = ps.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                for (int i = 0; i < params.length; i++) {
                    Object p = params[i];
                    p = typeof(p);
                    ps.setObject(i + 1, p);
                }
                ps.executeUpdate();
                commit(c);
                r = true;
            } catch (SQLException e) {
                System.out.println(operation + " 失败: " + e.getMessage());
                rollback(c);
            }
        }
        return r;
    }

    public static int insert(String SQL, boolean autoGeneratedKeys, List<Object> params) {
        int var = -1;
        if (SQL == null || SQL.trim().isEmpty()) {
            throw new RuntimeException("你没有指定SQL语句,请检查是否指定了需要执行的SQL语句");
        }
        if (!SQL.trim().toLowerCase().startsWith("insert")) {
            System.out.println(SQL.toLowerCase());
            throw new RuntimeException("你指定的SQL语句不是插入语句,请检查你的SQL语句");
        }
        SQL = SQL.trim();
        SQL = SQL.toLowerCase();
        if (params.size() > 0) {
            PreparedStatement ps = prepare(SQL, autoGeneratedKeys);
            Connection c = null;
            try {
                c = ps.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                for (int i = 0; i < params.size(); i++) {
                    Object p = params.get(i);
                    p = typeof(p);
                    ps.setObject(i + 1, p);
                }
                int count = ps.executeUpdate();
                if (autoGeneratedKeys) {
                    ResultSet rs = ps.getGeneratedKeys();
                    if (rs.next()) {
                        var = rs.getInt(1);
                    }
                } else {
                    var = count;
                }
                commit(c);
            } catch (SQLException e) {
                System.out.println("数据保存失败: " + e.getMessage());
                rollback(c);
            }
        } else {
            Statement st = statement();
            Connection c = null;
            try {
                c = st.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                int count = st.executeUpdate(SQL);
                if (autoGeneratedKeys) {
                    ResultSet rs = st.getGeneratedKeys();
                    if (rs.next()) {
                        var = rs.getInt(1);
                    }
                } else {
                    var = count;
                }
                commit(c);
            } catch (SQLException e) {
                System.out.println("数据保存失败: " + e.getMessage());
                rollback(c);
            }
        }
        return var;
    }

    private static void commit(Connection c) {
        if (c != null && !autoCommit) {
            try {
                c.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private static void rollback(Connection c) {
        if (c != null && !autoCommit) {
            try {
                c.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static void release(Object closeable) {
        if (closeable != null) {
            if (closeable instanceof ResultSet) {
                ResultSet rs = (ResultSet) closeable;
                try {
                    rs.close();;
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

            if (closeable instanceof Statement) {
                Statement st = (Statement) closeable;
                try {
                   st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (closeable instanceof Connection) {
                Connection c = (Connection) closeable;
                try {
                    c.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
























